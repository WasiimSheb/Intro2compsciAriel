package exe.ex3;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class MapTest {

	@Test
	void testInit() {
		Map matrix = new Map(2,2,3);
		int [][] expected = {{3,3},{3,3}};
		int [][] equals = matrix.getMap();
		assertArrayEquals(equals, expected);
	}

	@Test
	void testInitArray() {
		int [][] expected = {{2,2},{2,2}};
		Map matrix = new Map(expected);
		int [][] result = matrix.getMap();
		int [][] arr = null;
		assertThrows(RuntimeException.class, () -> new Map(arr));
		assertArrayEquals(expected, result);
	}

	@Test
	void testGetMap() {
		Map mat = new Map(2,2,0);
		int [][] result = {{0,0},{0,0}};
		int [][] expected = mat.getMap();
		assertArrayEquals(expected, result);
	}

	@Test
	void testGetWidth() {
		int [][] arr = {{2,3},{4,5}};
		Map x = new Map(arr);
		int z = x.getWidth();
		assertEquals(z, 2);
	}

	@Test
	void testGetHeight() {
		int [][] arr = {{2,3},{4,5}};
		Map x = new Map(arr);
		int z = x.getHeight();
		assertEquals(z, 2);
	}

	@Test
	void testGetPixelIntInt() {
		fail("Not yet implemented");
	}

	@Test
	void testGetPixelPixel2D() {
		fail("Not yet implemented");
	}

	@Test
	void testSetPixelIntIntInt() {
		fail("Not yet implemented");
	}

	@Test
	void testSetPixelPixel2DInt() {
		fail("Not yet implemented");
	}

	@Test
	void testFill() {
		fail("Not yet implemented");
	}

	@Test
	void testShortestPath() {
		fail("Not yet implemented");
	}

	@Test
	void testIsInside() {
		Map w = new Map(3,3,5);
		Pixel2D t1 = new Index2D(3,3);
		Pixel2D t2 = new Index2D(0,3);
		Pixel2D t3 = new Index2D(3,0);
		Pixel2D t4 = new Index2D(0,0);
		Pixel2D t5 = new Index2D(6,6);
		Pixel2D t6 = new Index2D(5,5);
		Pixel2D t7 = new Index2D(0,5);
		boolean ans1 = w.isInside(t1);
		boolean ans2 = w.isInside(t2);
		boolean ans3 = w.isInside(t3);
		boolean ans4 = w.isInside(t4);
		boolean ans5 = w.isInside(t5);
		boolean ans6 = w.isInside(t6);
		boolean ans7 = w.isInside(t7);
		if (!ans1) {fail();}
		if (!ans2) {fail();}
		if (!ans3) {fail();}
		if (!ans4) {fail();}
		if (ans5) {fail();}
		if (ans6) {fail();}
		assertTrue(!ans7);
	}

	@Test
	void testIsCyclic() {
		fail("Not yet implemented");
	}

	@Test
	void testSetCyclic() {
		fail("Not yet implemented");
	}

	@Test
	void testAllDistance() {
		fail("Not yet implemented");
	}

}
