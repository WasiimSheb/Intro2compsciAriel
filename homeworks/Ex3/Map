package exe.ex3;

/**
 * This class represents a 2D map as a "screen" or a raster matrix or maze over integers.
 * @author boaz.benmoshe
 *
 */
public class Map implements Map2D {
	private int[][] _map;
	private boolean _cyclicFlag = true;

	/**
	 * Constructs a w*h 2D raster map with an init value v.
	 * @param w
	 * @param h
	 * @param v
	 */
	public Map(int w, int h, int v) {init(w,h, v);}
	/**
	 * Constructs a square map (size*size).
	 * @param size
	 */
	public Map(int size) {this(size,size, 0);}

	/**
	 * Constructs a map from a given 2D array.
	 * @param data
	 */
	public Map(int[][] data) {
		init(data);
	}
	@Override
	public void init(int w, int h, int v) {
		int [][] ans = new int [h][w];
		for (int i = 0; i < w; i++){
			for ( int j = 0; j < h; j++){
				ans [i][j] = v;
			}
		}
	}
	@Override
	public void init(int[][] arr) {
		if (arr == null){
			throw new RuntimeException();
		}
		else{
			int [][] ans = new int [arr.length][arr[0].length];
			for (int i = 0; i < arr.length; i++){
				for (int j = 0; j < arr[0].length; j++){
					ans[i][j] = arr[i][j];
				}
			}
		}
	}
	@Override
	public int [][] getMap() {
		int x = _map.length;
		int y = _map[0].length;
		int [][] ans = new int [x][y];
		for (int i = 0; i < ans[0].length; i++) {
			for (int j = 0; j < ans.length; j++) {
				ans [i][j] = _map[i][j];
			}
		}
		return ans;
	}
	@Override
	/////// add your code below ///////
	public int getWidth() {return _map.length;}
	@Override
	/////// add your code below ///////
	public int getHeight() {return _map[0].length;}
	@Override
	/////// add your code below ///////
	public int getPixel(int x, int y) { 
		int ans = getMap()[x][y];
		return (int) ans;
	}
	@Override
	/////// add your code below ///////
	public int getPixel(Pixel2D p) {
		return (int) this.getPixel(p.getX(),p.getY());
	}
	@Override
	/////// add your code below ///////
	public void setPixel(int x, int y, int v) {
		_map[x][y] = v;
	}
	@Override
	/////// add your code below ///////
	public void setPixel(Pixel2D p, int v) {
		_map[p.getX()][p.getY()] = v;
	}
	@Override
	/** 
	 * Fills this map with the new color (new_v) starting from p.
	 * https://en.wikipedia.org/wiki/Flood_fill
	 */
	public int fill(Pixel2D xy, int new_v) {
		int ans=0;
		/////// add your code below ///////

		///////////////////////////////////
		return ans;
	}

	@Override
	/**
	 * BFS like shortest the computation based on iterative raster implementation of BFS, see:
	 * https://en.wikipedia.org/wiki/Breadth-first_search
	 */
	public Pixel2D[] shortestPath(Pixel2D p1, Pixel2D p2, int obsColor) {
		Pixel2D[] ans = null;  // the result.
		/////// add your code below ///////

		///////////////////////////////////
		return ans;
	}
	@Override
	/////// add your code below ///////
	public boolean isInside(Pixel2D p) {
		int z = _map.length;
		int c = _map[0].length;
		int x = p.getX();
		int y = p.getY();
		boolean ans = false;
		if (Math.abs(_map[0][y] - x) + Math.abs(((_map[z][y]) - x)) == _map.length){
			if (Math.abs(_map[x][0] - y) + Math.abs(((_map[x][c]) - y)) == _map[0].length){
				ans = true;
			}
		}
		return ans;
	}

	@Override
	/////// add your code below ///////
	public boolean isCyclic() {
		return false;
	}
	@Override
	/////// add your code below ///////
	public void setCyclic(boolean cy) {;}
	@Override
	/////// add your code below ///////
	public Map2D allDistance(Pixel2D start, int obsColor) {
		Map2D ans = null;  // the result.
		/////// add your code below ///////

		///////////////////////////////////
		return ans;
	}
}
