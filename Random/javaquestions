import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Scanner;

public class wasim {
	/**public static <T> MyListInterface<T> toSet(MyListInterface<T>  l){
		MyListInterface<T> v = new MyList<>();
			for (int i =0; i<l.size();i++)
			{
				if (!v.contains(l.get(i)))
				{
					v.add(l.get(i));
				}
			}
			return v;
	}
	public static <T> MyListInterface<T> intersect(MyListInterface<T>  l1, MyListInterface<T>  l2)
	{
		MyList<T> r= new MyList<T>();
		for (int i=0; i<l1.size();i++)
		{
			if (l2.contains(l1.get(i)))
			{
				r.add(l1.get(i));
			}
		}
		return r;
	}
	public static <T> MyListInterface<T> union(MyListInterface<T>  l1, MyListInterface<T>  l2)
	{
		MyListInterface<T> union= new MyList<T>();
		for(int j=0; j<l2.size();j++)
		{
			union.add(l2.get(j));
		}
		for (int i=0; i<l1.size();i++)			
		{
			if(!(union.contains(l1.get(i))))
			{
				union.add(l1.get(i));
			}
		}
		return union;
	}
	public static<T> int Q7(MyListInterface <T> l)
	{
		MyListInterface <String> ans= new MyList<String>();
		int count=0;
		for (int i=0; i<l.size();i++)
		{
			ans.add(l.get(i).getClass().getSimpleName());
		}
		for (int j=0; j<ans.size();j++)
		{
			for(int k=j+1;k<ans.size();k++)
			{
				if (ans.get(j).equals(ans.get(k)))
				{
					ans.removeElementAt(k);
				}
			}
		}
		return ans.size();
	}
	public static int[] Q12(double[] arr)
	{
		int len=1;
		int []d= new int [len];
		for (int i=0; i<arr.length-1;i++)
		{
			if (arr[i]<arr[i+1])
			{
				len++;
				d =  new int [len];
				d[i]=(int) arr[i];
			}
			int max=0;
			if(d.length>max)
			{
				max=d.length;
			}
		}
		return d;
	}
	public static boolean isOfTheSameStructure(BinaryTree bt1, BinaryTree bt2) 
	{
		if (bt1==null&&bt2==null)
		{
			return true;
		}
		if(bt1==null||bt2==null)
		{
			return false;
		}
		return isOfTheSameStructure(bt1.getLeft(),bt2.getLeft()) 
				&& isOfTheSameStructure(bt1.getRight(),bt2.getRight());
	}
	public static <T> ArrayList<T>  q10(BinaryTree<T> bt1){
		ArrayList <BinaryTree> x = new ArrayList<BinaryTree>();
			if (bt1!=null)
			{
				q10(bt1.getLeft());
				if(bt1.isLeaf()) {x.add(bt1);}
				q10(bt1.getRight());
			}
		return (ArrayList<T>) x;
	}
	public static String Q12(String s)
	{
		int count=0;
		int [] z = new int['z'];
		for(int i=0; i<s.length();i++) {	
			z[s.charAt(i)]++;
		}
		String x="";
		for (int i=0; i<s.length();i++)
		{
			if(z[s.charAt(i)]==1)
			{
				x+=s.charAt(i);
			}
		}
			return x;
	}
	public static <T> MyListInterface<Integer> toSet2(MyListInterface<Integer>  l){
		//{1,1,2,3,2,4,5,1}
		//{3,2,4,5,1} j = 2
		MyListInterface<Integer>  r = new MyList<>();
		int num1 = 0;
		int num2 = 0;
		int i = 0;
		int countR = 0;
		int countL = 0;
		int size = l.size();
		while(size != 0 ) 
		{
			num1 = (int) l.get(i);
			l.removeElementAt(i);
			while(!l.isEmpty()) {
				num2 = (int) l.get(i);
				l.removeElementAt(i);
				if(num1 != num2) {
					r.addAt(num2, countR++);
				}
			}
			r.addAt(num1, countR++);
			while(!r.isEmpty()) 
			{
				l.addAt(r.get(i),countL++);
				r.removeElementAt(i);
			}
			countL = 0;
			countR = 0;
			size--;
		}
		System.out.println("l = " + l.toString());
		return l;
	}
	public static boolean isper(ArrayList<String>words, String line)
	{
		boolean ans = false;
		int index=0;
		if (words.size()==0&&line.length()==0)
		{
		for (int i=0; i<words.size();i++)
		{
			if ((index=line.indexOf(words.get(i), 0))==-1)
			{
				return ans;
			}
			String s= line.substring(index, index+words.get(i).length());
			if (s.equals(words.get(i)))
			{
				ans= true;
			}
		}
		}
		return ans;
	}
		public static int []d_range(int n)
			{
			int []z;
			boolean ans= true;
			int maxprime=n+1, minprime=n-1;
			while(!(isprime(maxprime)))
			{
				maxprime+=1;
			}
			while(!isprime(minprime))
			{
				minprime-=1;
			}
			for (int i = minprime+1;i<maxprime;i++)
			{
				if (!isprime(i))
				{
					ans= true;
				}
				else
					ans= false;
			}
			if (ans==true)
			{
				int index=0;
				z= new int [maxprime -minprime -1];
				for (int i = minprime+1;i<maxprime;i++)
				{
					z[index]= i;
					index++;
				}
			}
			else
				z= new int[0];
			return z;
			}
	private static boolean isprime(int maxprime) {
		for (int i=2;i<maxprime;i++)
		{
			if (maxprime%i==0)
			{
				return false;
			}
		}
			return true;
		}
	public static int numberofrealroots(Parabula p)
	{
		int count=0;
		double eq1,eq2;
		eq1= ((p.get()[1]*-1)-Math.pow(p.get()[1],2)-4*p.get()[0]*p.get()[3]);
		eq2= ((p.get()[1]*-1)+Math.pow(p.get()[1],2)-4*p.get()[0]*p.get()[3]);
		if(eq1==0)
		{
			count++;
		}
		if(eq2==0)
		{
			count++;
		}
		return count;
	}
		public static void sort(ArrayList<Parabula>a)
		{	
	      for( int i =0; i< a.size();i++)
	      {
	    	  for (int j=i+1; j<a.size();j--)
	    	  {
	    		 double x1= a.get(j).extream(a.get(j));
	    		 double x2= a.get(j-1).extream(a.get(j-1));
	    		 double y1= a.get(j).f(x1);
	    		 double y2= a.get(j-1).f(x2);
	    		 if (y1>y2)
	    		 {
	    			 Collections.swap(a,j-1,j);
	    		 }
	    	  }
	      	}
		}
		public static String[] allCodes()
		{
			String [] arr= new String[120];
			int x= 5;
			int index=0;
			for (int i=1; i<=x; i++)
			{
				for (int j=1; j<=x; j++)
				{
					for (int l=1; l<=x; l++)
					{
						for (int k=1; k<=x; k++)
						{
							if (i!=l&&i!=j&&i!=k&&j!=l&&j!=k&&l!=k)
							{
								arr[index]= "i"+"j"+"l"+"k"+"#";
								index++;	
							}
						}
					}
				}
			}
			return arr;
		}
		public static long sortDigits(long num)
		{
			long t=0;
			int []a= new int[10];
			while(num>0)
			{
				a[(int) (num%10)]++;
				num/=10;
			}
			for (int i=1;i<10;i++)
			{
				for (int k=1; k<=a[i];k++)
				{
					t*=10;
					t+=i;
				}
			}
			return t;
		}
		public static int isIn(int[]a, int []b)
		{
			int count=0;
			for (int i=0;i<b.length-a.length+1;i++)
			{
				if(b[i]==a[0])
				{
					for (int j=0;j<a.length;j++)
					{
						if(a[j]!=b[j+i])
							break;
						if(j==a.length-1)
							count++;
					}
				}
			}
			return count;
		}
		public static int[] interlace(int []a, int b[])
		{
			int i=0; int j=0; int k=0;
			int alen= a.length; int blen= b.length;
			int []c = new int [alen+blen];
			while(i<alen&&j<blen)
			{
				c[k++]= a[i];
				c[k++]= b[j];
				i++;
				j++;
			}
			while (i<alen)
			{
				c[k++]= a[i++];
			}
			while (j<blen)
			{
				c[k++]= b[j++];
			}
			return c;
		}
		public static int binary(String s)
		{
			int n=0;
			int l= s.length()-1;
			for(int i=0; i<=l;i++)
			{
				if (s.charAt(i)!='0'&&s.charAt(i)!='1')
				{
					return -1;
				}
				int digit= Integer.parseInt(""+s.charAt(i));
				n+=digit*(int)Math.pow(2, l-i);
			}
			return n;
		}
		
		public static String q2(String str)
		{
			String s= "";
			for (int i=0; i<str.length();i++)
			{
				char c=	str.charAt(i);
				if (!(c==str.charAt(i+1))) {
					s+=c;
				}
			}
			return s;
}
		public static void shuffle (double[] arr) {
	    	int n = arr.length;
	    	for (int i = 0; i < n; i++) {
	        		int r = i+ (int) (Math.random() * (n-i)); 
	        		exch(arr, i, r); 
	  	}
	}
	public static void exch(double[] a, int i, int j) 
	{double swap = a[i]; a[i] = a[j]; a[j] = swap; }
	public static long mcd1(long x, long y, long z)
	{
		long j=0;
		long d= x*y*z;
		for (long i=2;i<=d; i++)
		{
			if ((i%x==0)&&(i%y==0)&&(i%z==0))
			{
				j=i;
			 break;
			}
		}
			return j;
	}**/
